package actions

import (
	"fmt"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/x/responder"
	"net/http"
	"relay_pi/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Device)
// DB Table: Plural (devices)
// Resource: Plural (Devices)
// Path: Plural (/devices)
// View Template Folder: Plural (/templates/devices/)

// DevicesResource is the resource for the Device model
type DevicesResource struct {
	buffalo.Resource
}

// List gets all Devices. This function is mapped to the path
// GET /devices
func (v DevicesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	devices := &models.Devices{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	//q := tx.PaginateFromParams(c.Params())

	// Retrieve all Devices from the DB
	if err := tx.Eager().All(devices); err != nil {
		return err
	}

	//if err := q.Where("room_id = ?", c.Param("room_id")).All(devices); err != nil {
	// return err
	//}

	return c.Render(200, r.JSON(devices))

	//return responder.Wants("html", func (c buffalo.Context) error {
	//  // Add the paginator to the context so it can be used in the template.
	//  c.Set("pagination", q.Paginator)
	//
	//  c.Set("devices", devices)
	//  return c.Render(http.StatusOK, r.HTML("/devices/index.plush.html"))
	//}).Wants("json", func (c buffalo.Context) error {
	//  return c.Render(200, r.JSON(devices))
	//}).Wants("xml", func (c buffalo.Context) error {
	//  return c.Render(200, r.XML(devices))
	//}).Respond(c)
}

// Show gets the data for one Device. This function is mapped to
// the path GET /devices/{device_id}
func (v DevicesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Device
	devex := &models.Device{}

	// To find the Device the parameter device_id is used.
	if err := tx.Find(devex, c.Param("device_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("devex", devex)

		return c.Render(http.StatusOK, r.HTML("/devices/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(devex))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(devex))
	}).Respond(c)
}

// New renders the form for creating a new Device.
// This function is mapped to the path GET /devices/new
func (v DevicesResource) New(c buffalo.Context) error {
	c.Set("devex", &models.Device{})

	return c.Render(http.StatusOK, r.HTML("/devices/new.plush.html"))
}

// Create adds a Device to the DB. This function is mapped to the
// path POST /devices
func (v DevicesResource) Create(c buffalo.Context) error {
	// Allocate an empty Device
	devex := &models.Device{}

	// Bind devex to the html form elements
	if err := c.Bind(devex); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(devex)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("devex", devex)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/devices/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "devex.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/devices/%v", devex.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(devex))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(devex))
	}).Respond(c)
}

// Edit renders a edit form for a Device. This function is
// mapped to the path GET /devices/{device_id}/edit
func (v DevicesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Device
	devex := &models.Device{}

	if err := tx.Find(devex, c.Param("device_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("devex", devex)
	return c.Render(http.StatusOK, r.HTML("/devices/edit.plush.html"))
}

// Update changes a Device in the DB. This function is mapped to
// the path PUT /devices/{device_id}
func (v DevicesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Device
	devex := &models.Device{}

	if err := tx.Find(devex, c.Param("device_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Device to the html form elements
	if err := c.Bind(devex); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(devex)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("devex", devex)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/devices/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "devex.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/devices/%v", devex.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(devex))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(devex))
	}).Respond(c)
}

// Destroy deletes a Device from the DB. This function is mapped
// to the path DELETE /devices/{device_id}
func (v DevicesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Device
	devex := &models.Device{}

	// To find the Device the parameter device_id is used.
	if err := tx.Find(devex, c.Param("device_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(devex); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "devex.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/devices")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(devex))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(devex))
	}).Respond(c)
}
