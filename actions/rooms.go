package actions

import (
	"fmt"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/x/responder"
	"net/http"
	"relay_pi/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Room)
// DB Table: Plural (rooms)
// Resource: Plural (Rooms)
// Path: Plural (/rooms)
// View Template Folder: Plural (/templates/rooms/)

// RoomsResource is the resource for the Room model
type RoomsResource struct {
	buffalo.Resource
}

// List gets all Rooms. This function is mapped to the path
// GET /rooms
func (v RoomsResource) List(c buffalo.Context) error {
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	rooms := &models.Rooms{}

	if err := tx.Eager("Devices.Pins").All(rooms); err != nil {
		return err
	}

	return c.Render(200, r.JSON(rooms))
}

// Show gets the data for one Room. This function is mapped to
// the path GET /rooms/{room_id}
func (v RoomsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Room
	room := &models.Room{}

	// To find the Room the parameter room_id is used.
	if err := tx.Eager().Find(room, c.Param("room_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(room))
}

// New renders the form for creating a new Room.
// This function is mapped to the path GET /rooms/new
func (v RoomsResource) New(c buffalo.Context) error {
	c.Set("room", &models.Room{})

	return c.Render(http.StatusOK, r.HTML("/rooms/new.plush.html"))
}

// Create adds a Room to the DB. This function is mapped to the
// path POST /rooms
func (v RoomsResource) Create(c buffalo.Context) error {
	// Allocate an empty Room
	room := &models.Room{}

	// Bind room to the html form elements
	if err := c.Bind(room); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(room)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("room", room)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/rooms/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "room.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/rooms/%v", room.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(room))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(room))
	}).Respond(c)
}

// Edit renders a edit form for a Room. This function is
// mapped to the path GET /rooms/{room_id}/edit
func (v RoomsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Room
	room := &models.Room{}

	if err := tx.Find(room, c.Param("room_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("room", room)
	return c.Render(http.StatusOK, r.HTML("/rooms/edit.plush.html"))
}

// Update changes a Room in the DB. This function is mapped to
// the path PUT /rooms/{room_id}
func (v RoomsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Room
	room := &models.Room{}

	if err := tx.Find(room, c.Param("room_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Room to the html form elements
	if err := c.Bind(room); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(room)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("room", room)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/rooms/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "room.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/rooms/%v", room.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(room))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(room))
	}).Respond(c)
}

// Destroy deletes a Room from the DB. This function is mapped
// to the path DELETE /rooms/{room_id}
func (v RoomsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Room
	room := &models.Room{}

	// To find the Room the parameter room_id is used.
	if err := tx.Find(room, c.Param("room_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(room); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "room.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/rooms")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(room))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(room))
	}).Respond(c)
}
